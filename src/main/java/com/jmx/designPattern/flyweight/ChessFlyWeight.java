package com.jmx.designPattern.flyweight;

/**
 * 享元模式，核心是共享对象，主要用于减少创建对象的数量，节省内存。
 * 原理： 利用先前已创建的对象，通过某种规则判断是否可以利用原有对象做修改（外部状态）后得到想要的效果
 * 状态： 1. 内部状态，不改变的状态，如棋盘中的棋子的颜色、形状和大小     2. 外部状态： 棋子的位置
 *
 * 核心组件： 1. 享元工厂类： 创建和管理享元对象，按键值对设计
 * 2. 抽象享元类： 通常是一个接口或抽象类，声明公共方法，可以向外界提供对象的内部状态，设置外部状态
 * 3. 具体享元类： 为内部状态提供成员变量进行保存
 * 4. 非共享享元类： 不能被共享的子类（外部状态）
 * 以下以围棋棋盘为例
 */
//抽象享元类
public interface ChessFlyWeight {
    //设置棋子颜色
    void setColor(String color);
    //获取棋子颜色
    String getColor();
    //展示棋子在不同的坐标
    void disPlay(Coordinate c);
}

